scalar DateTime
scalar UUID

# For "dynamic", timestamp-based pagination.
# The contract of endpoints using this pagination model is typically that they will try to return ~numberOfItems from a
# given point, but make no guarantee on the exact number of items returned.
input TimePagination {
  from: DateTime # Typically looking backwards from that point in time.
  numberOfItems: Int!
}

type Patient {
  id: UUID!
}

type EphemeralUrl {
  expiresAt: DateTime!
  url: String!
}

type Provider {
  id: UUID!
  avatarURL: EphemeralUrl
}

union MessageAuthor = Patient | Provider

type Message {
  id: UUID!

  author: MessageAuthor!
  conversation: Conversation!

  content: MessageContent

  clientID: UUID!
}

type Conversation {
  id: UUID!

  title: String
  description: String
  lastMessagePreview: String
  unreadMessageCount: Int!

  providers: [ConversationProvider!]!
  messages(page: TimePagination!): ConversationMessagesPage!
}

type ConversationProvider {
  id: UUID!

  provider: Provider!

  isTyping: Boolean!
  seenUntil: DateTime
}

type ConversationMessagesPage {
  data: [Message]!
  hasMore: Boolean!
  nextCursor: DateTime
}

type TypingProvider {
  provider: Provider!
  typingAt: DateTime!
}

union MessageContent =
  TextMessageContent
  | ImageMessageContent
  | DocumentMessageContent
  | DeletedMessageContent

type TextMessageContent {
  text: String!
}

interface FileUpload {
  uuid: String!
  url: EphemeralUrl!
  fileName: String!
  mimeType: String!
}

type ImageFileUpload implements FileUpload {
  uuid: String!
  url: EphemeralUrl!
  fileName: String!
  mimeType: String!
  width: Int!
  height: Int!
}

type DocumentFileUpload implements FileUpload {
  uuid: String!
  url: EphemeralUrl!
  fileName: String!
  mimeType: String!
  thumbnail: ImageFileUpload
}

type ImageMessageContent {
  fileUpload: ImageFileUpload!
}

type DocumentMessageContent {
  fileUpload: DocumentFileUpload!
  title: String
}

enum EmptyObject {
  EMPTY
}

type DeletedMessageContent {
  _: EmptyObject!
}


# Queries.
# --------

input OpaqueCursorPage {
  cursor: String
  # The number of results to ask for.
  # Set to -1 to explicitely ask for "all results".
  # Leave null to let the backend pick a default value.
  numberOfItems: Int
}

type Query {
  conversations(page: OpaqueCursorPage!): ConversationsOutput!

  conversation(id: UUID!): ConversationOutput!
}

type ConversationsOutput {
  conversations: [Conversation!]!

  nextCursor: String
  hasMore: Boolean!
}

type ConversationOutput {
  conversation: Conversation!
}


# Mutations.
# ----------

type Mutation {
  createConversation: CreateConversationOutput!

  sendMessage(
    conversationID: UUID!,
    content: SendMessageContentInput!,
    clientID: UUID!
  ): SendMessageOutput!

  deleteMessage(
    id: UUID!
  ): DeleteMessageOutput!

  markAsSeen(
    conversationID: UUID!
  ): MarkConversationAsSeenOutput!

  setTyping(
    conversationID: UUID!,
    isTyping: Boolean!
  ): SetTypingOutput!
}

# This is a oneOf input, i.e. there is _exactly one_ non null attribute.
input SendMessageContentInput {
  textInput: SendTextMessageInput
  imageInput: SendImageMessageInput
  documentInput: SendDocumentMessageInput
}

input SendTextMessageInput {
  text: String!
}

input UploadInput {
  uuid: UUID!
}

input SendImageMessageInput {
  upload: UploadInput!
}

input SendDocumentMessageInput {
  upload: UploadInput!
}

type SendMessageOutput {
  message: Message!
}

type DeleteMessageOutput {
  message: Message!
}

type MarkConversationAsSeenOutput {
  conversation: Conversation!
}

type SetTypingOutput {
  conversation: Conversation!
}

type CreateConversationOutput {
  conversation: Conversation!
}

# Subscriptions.
# --------------

type Subscription {
  conversations: ConversationsEvent!
  conversation(id: UUID!): ConversationEvent!
}

union ConversationsEvent =
  ConversationCreatedEvent
  | ConversationUpdatedEvent
  | ConversationDeletedEvent

type ConversationCreatedEvent {
  conversation: Conversation!
}

type ConversationUpdatedEvent {
  conversation: Conversation!
}

type ConversationDeletedEvent {
  conversationID: UUID!
}

union ConversationEvent =
  MessageCreatedEvent
  | MessageUpdatedEvent
  | ConversationProviderAddedEvent
  | ConversationProviderRemovedEvent
  | ConversationProviderUpdatedEvent
  | ConversationTitleUpdatedEvent
  | ConversationDescriptionUpdatedEvent

type MessageCreatedEvent {
  message: Message!
}

type MessageUpdatedEvent {
  message: Message!
}

type ConversationProviderAddedEvent {
  conversation: Conversation!
  conversationProvider: ConversationProvider!
}

type ConversationProviderUpdatedEvent {
  conversation: Conversation!
  conversationProvider: ConversationProvider!
}

type ConversationProviderRemovedEvent {
  conversation: Conversation!
  conversationProviderID: UUID!
}

type ConversationTitleUpdatedEvent {
  conversation: Conversation!
}

type ConversationDescriptionUpdatedEvent {
  conversation: Conversation!
}